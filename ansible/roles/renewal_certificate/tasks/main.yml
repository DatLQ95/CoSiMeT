---
# Check if 
# Stop the server, by running upgrade.sh
# Copy the new certificates
# Run deploy.sh again!

# Create a new folder:
- name: create the directory to install the CS server
  file:
    path: ~/cloudsight_{{ cloudsight_version }}_{{ time_str }}
    state: directory

# Run upgrade.sh script
- name: Run upgrade.sh script
  shell: ../cloudsight-server-install/upgrade.sh
  args: 
    chdir: /home/{{ ansible_user }}/cloudsight_{{ cloudsight_version }}_{{ time_str }}/
  ignore_errors: yes
  become: yes
  async: 1800
  poll: 60

# Replace the old http.keystore with a new one
- name: Delete the http.keystore
  file:
    state: absent
    path: ~/cloudsight_{{ cloudsight_version }}_{{ time_str }}/http.keystore

# Replace the old http.keystore with a new one
- name: Delete the https.pem
  file:
    state: absent
    path: ~/cloudsight_{{ cloudsight_version }}_{{ time_str }}/https.pem

# Replace the old http.keystore with a new one
- name: Delete the https.crt
  file:
    state: absent
    path: ~/cloudsight_{{ cloudsight_version }}_{{ time_str }}/https.crt

- name: Copy the key files 
  copy:  
    src: ../../../../src/{{ key_file_path }}
    dest: ~/cloudsight_{{ cloudsight_version }}_{{ time_str }}/

# Run the deployment command: 
- name: Execute the deployment
  shell: ../cloudsight-server-install/deploy.sh {{ cloudsight_version }}
  args: 
    chdir: /home/{{ ansible_user }}/cloudsight_{{ cloudsight_version }}_{{ time_str }}/
  ignore_errors: yes
  become: yes
  register: deploy_out
  async: 3600
  poll: 60

- debug: msg="{{ deploy_out.stdout.split('\n') }}"

# copy the log files back to the host and return the result variable
- name: Recursively find the log files
  find:
    paths: /home/{{ ansible_user }}/cloudsight_{{ cloudsight_version }}_{{ time_str }}/
    file_type: file
    patterns: "*.log"
  register: files_to_fetch

- name: fetch files
  fetch:
    src: "{{ item.path }}"
    dest: ../result/
  loop: "{{ files_to_fetch.files }}"
